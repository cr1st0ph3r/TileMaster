/* Generated by MyraPad at 04.12.2019 21:54:46 */
using Microsoft.Xna.Framework;
using Myra.Graphics2D.Brushes;
using Myra.Graphics2D.UI;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace TileMaster.UI
{
    public partial class MainPanel
    {
        private readonly DebugWindow _debugWindow = new DebugWindow();
        InventoryWindow inventoryWindow;
        private readonly Window2 _window2 = new Window2();
        private readonly Window3 _window3 = new Window3();
        public Panel ActionBarPanel;
        public Panel ItemInfoPanel;
 
        public MainPanel()
        {
            BuildUI();

            _debugButton.PressedChanged += _button1_PressedChanged;
            _button2.PressedChanged += _button2_PressedChanged;
            _button3.PressedChanged += _button3_PressedChanged;
            _loadMapButton.PressedChanged += _loadMapButton_PressedChanged;
            _openInventoryButton.PressedChanged += _openInventoryButton_PressedChanged;
            _quitButton.PressedChanged += _quitButton_PressedChanged;


            _debugWindow.Closed += (s, a) =>
            {
                _debugButton.IsPressed = false;
            };

            _window2.Closed += (s, a) =>
            {
                _button2.IsPressed = false;
            };

            _window3.Closed += (s, a) =>
            {
                _button3.IsPressed = false;
            };

            inventoryWindow = new InventoryWindow(ItemInfoPanel);
        }
        public void ShowWindows()
        {
            //_debugButton.IsPressed = true;
            //_button2.IsPressed = true;
            //_button3.IsPressed = true;
            // _actionBarWindow.Show(Desktop, new Point(300, Global.WindowHeight-100));
        }

        public void LoadMap()
        {
            var game = Game.GetInstance();
            game._mainPanel._horizontalProgressBar.Visible = true;
            //run this heavy process on a task as not to block the UI
            var task = Task.Run(() => game.LoadMap());
            Game._state = GameState.Running;
            //when the task of loading the map is over, hide the progress bar
            task.ContinueWith(t => { game._mainPanel._horizontalProgressBar.Visible = false; });
        }
        public void HandleActionBarPress(ImageTextButton pressedButton)
        {
            pressedButton.Background = new SolidBrush("#cf5c15");
            foreach (var butt in ActionBarPanel.Widgets.Where(x=>x.Id!=pressedButton.Id))
            {
                butt.Background = new SolidBrush(Global.ActionBarButtonColor);
            }
        }

        public void UpdateItemInfoPanelLocation()
        {
            ItemInfoPanel.Top = Global.CursorY;
            ItemInfoPanel.Left = Global.CursorX;
            ItemInfoPanel.Visible = true;
           
        }   
        public void HideItemInfoPanelLocation()
        {          
            ItemInfoPanel.Visible = false;           
        }

        #region Debug
        public void UpdateFPS(int value)
        {
            _debugWindow.SPFramesPerSecond.Value = value;
        }
        public void UpdatePlayerPos(int x, int y)
        {
            _debugWindow.SPPlayerPositionX.Value = x;
            _debugWindow.SPPlayerPositionY.Value = y;

        }
        #endregion

        #region Handlers
        private void _actionBarButtonPress(object sender, System.EventArgs e)
        {
            
            HandleActionBarPress(sender as ImageTextButton);
        }
        private void _button1_PressedChanged(object sender, System.EventArgs e)
        {
            if (_debugButton.IsPressed)
            {
                _debugWindow.Show(Desktop, new Point(Global.WindowWidth - 500, 100));
            }
            else
            {
                _debugWindow.Close();
            }
        }

        private void _loadMapButton_PressedChanged(object sender, System.EventArgs e)
        {
            if (_loadMapButton.IsPressed)
            {
                LoadMap();
            }
        }  

        private void _openInventoryButton_PressedChanged(object sender, System.EventArgs e)
        {
            if (_openInventoryButton.IsPressed)
            {
                inventoryWindow.Show(Desktop, new Point(Global.WindowWidth/2-100, Global.WindowHeight/2));
            }
            else
            {
                _window2.Close();
            }
        }  
        private void _quitButton_PressedChanged(object sender, System.EventArgs e)
        {
            //since the games takes a bit to unload everything and quit,
            //i made perform a minimize action to make it looks like the game quit faster
            var game = Game.GetInstance();
            var form = (System.Windows.Forms.Form)System.Windows.Forms.Form.FromHandle(game.Window.Handle);
            form.WindowState = System.Windows.Forms. FormWindowState.Minimized;

            //quid game dialog?

            //quit
            Environment.Exit(0);
        }

        private void _button2_PressedChanged(object sender, System.EventArgs e)
        {
            if (_button2.IsPressed)
            {
                _window2.Show(Desktop, new Point(Global.WindowWidth - 800, 100));
            }
            else
            {
                _window2.Close();
            }
        }

        private void _button3_PressedChanged(object sender, System.EventArgs e)
        {
            if (_button3.IsPressed)
            {
                _window3.Show(Desktop, new Point(Global.WindowWidth - 500, 400));
            }
            else
            {
                _window3.Close();
            }
        }
        #endregion
    }
}